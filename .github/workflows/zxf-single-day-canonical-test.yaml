# SPDX-License-Identifier: Apache-2.0
name: "ZXF: [CITR] Single Day Canonical Test (SDCT)"

on:
  workflow_dispatch:
    inputs:
      ref:
        required: true
        default: "main"
        description: "Version of hiero-consensus-node: branch, tag, commit."
        type: string
      build-tag:
        required: true
        description: "build-XXXXX tag associated with the ref input."
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read
  id-token: write

jobs:
  canonical-test:
    name: Canonical
    runs-on: hiero-citr-linux-medium

    timeout-minutes: 90 # max one hour timeout

    outputs:
      harden-runner: ${{ steps.harden-runner.outcome }}
      checkout-code: ${{ steps.checkout-code.outcome }}
      gcloud-auth: ${{ steps.gcloud-auth.outcome }}
      setup-gcloud: ${{ steps.setup-gcloud.outcome }}
      install-tools: ${{ steps.install-tools.outcome }}
      parameters: ${{ steps.parameters.outcome }}
      check-if-exist: ${{ steps.check-if-exist.outcome }}
      start-canonical-test: ${{ steps.start-canonical-test.outcome }}
      summary: ${{ steps.summary.outcome }}
      commit: ${{ steps.parameters.outputs.sha || 'N/A' }}

    steps:
      - name: Harden Runner
        id: harden-runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        id: checkout-code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ github.token }}
          persist-credentials: false

      - name: Authenticate to Google Cloud
        id: gcloud-auth
        uses: step-security/google-github-auth@40f6deebd366f16c782d7a0ad0844e3b96a032a6 # v2.1.10
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "hedera-artifact-builds@devops-1-254919.iam.gserviceaccount.com"
          token_format: "access_token"
          create_credentials_file: true

      - name: Setup Google Cloud SDK
        id: setup-gcloud
        uses: google-github-actions/setup-gcloud@77e7a554d41e2ee56fc945c52dfd3f33d12def9a # v2.1.4
        with:
          version: "latest"
          install_components: "gsutil"

      - name: Install Utility Tools
        id: install-tools
        run: |-
          # log functions
          log_info() { echo "[$(date '+%Y-%m-%d %T')] ℹ️  $1"; }
          log_pass() { echo "[$(date '+%Y-%m-%d %T')] ✅ $1"; }

          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            jq=1.6-* curl=7.81.0-*

          log_info "Verifying tool installations..."
          echo "JQ Version: $(jq --version)"
          echo "Curl Version: $(curl --version | head -1)"
          echo "GSUtil Version: $(gsutil version | head -1)"

          log_pass "All tools successfully installed and verified"

      - name: Verify Workflow Parameters
        id: parameters
        env:
          REF_INPUT: ${{ inputs.ref }}
          BUILD_TAG_INPUT: ${{ inputs.build-tag }}
        run: |-
          # log functions
          log_info() { echo "[$(date '+%Y-%m-%d %T')] ℹ️  $1"; }
          log_pass() { echo "[$(date '+%Y-%m-%d %T')] ✅ $1"; }
          log_error() { echo "[$(date '+%Y-%m-%d %T')] ❌ $1" >&2; }

          set -euo pipefail

          BRANCH_NAME="${REF_INPUT//[^a-zA-Z0-9\-_]/_}"
          BRANCH_NAME_LOWER="$(echo "${BRANCH_NAME}" | tr '[:upper:]' '[:lower:]')"
          BUILD_ARTIFACT="${BUILD_TAG_INPUT//[^a-zA-Z0-9\-_.]/_}"

          log_info "Parameters: Branch: ${BRANCH_NAME}, Build: ${BUILD_ARTIFACT}"
          if [[ "${BRANCH_NAME_LOWER}" = "main" ]]; then
            TAG_COMMIT_SHA=$(git rev-list -n 1 "${BUILD_ARTIFACT}") || {
              log_error "Failed to get commit SHA for tag: ${BUILD_ARTIFACT}"
              log_info "Available tags:"
              git tag -l | head -10
              exit 1
            }
            TAG_COMMIT_SHORT="${TAG_COMMIT_SHA:0:8}"
            BUILD_ARTIFACT="build-${BRANCH_NAME_LOWER}-${TAG_COMMIT_SHORT}"
            log_info "Artifact name for main branch: ${BUILD_ARTIFACT}"
            echo "sha=${TAG_COMMIT_SHA}" >> "${GITHUB_OUTPUT}"
          fi
          log_pass "Parameter verification completed"
          echo "artifact-name=${BUILD_ARTIFACT}" >> "${GITHUB_OUTPUT}"

          # Update Summary
          {
            echo "## Parameter Processing Results"
            echo "- **Input Branch/Ref**: ${BRANCH_NAME}"
            echo "- **Input Build Tag**: ${{ inputs.build-tag }}"
            echo "- **Generated Artifact Name**: ${BUILD_ARTIFACT}"
            if [[ "${BRANCH_NAME_LOWER}" = "main" ]]; then
              echo "- **Commit SHA**: \`${TAG_COMMIT_SHA}\`"
              echo "- **Short Commit**: \`${TAG_COMMIT_SHORT}\`"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Check Artifact Availability
        id: check-if-exist
        timeout-minutes: 60 # step timeout
        run: |-
          # log functions
          log_info() { echo "[$(date '+%Y-%m-%d %T')] ℹ️  $1"; }
          log_pass() { echo "[$(date '+%Y-%m-%d %T')] ✅ $1"; }
          log_error() { echo "[$(date '+%Y-%m-%d %T')] ❌ $1" >&2; }
          log_warning() { echo "[$(date '+%Y-%m-%d %T')] ⚠️  $1"; }

          set -euo pipefail

          ARTIFACT_NAME="${{ steps.parameters.outputs.artifact-name }}"
          BUCKET_NAME="${{ secrets.RELEASE_ARTIFACT_BUCKET_NAME }}"
          if [[ -z "${ARTIFACT_NAME// }" ]]; then
            log_error "Artifact name is empty or contains only whitespace"
            exit 1
          fi
          if [[ -z "${BUCKET_NAME// }" ]]; then
            log_error "Bucket name is empty - check RELEASE_ARTIFACT_BUCKET_NAME secret"
            exit 1
          fi

          ARTIFACT_PATH="gs://${BUCKET_NAME}/${ARTIFACT_NAME}.zip"

          log_info "Check artifact availability for up to 2 minutes max 30 attempts......"
          i=1
          while [ "$i" -le 30 ]; do
            if gsutil -q stat "${ARTIFACT_PATH}"; then
              log_pass "Artifact ${ARTIFACT_NAME}.zip found on attempt ${i}!"
              break
            fi
            log_warning "Artifact ${ARTIFACT_NAME}.zip not ready on attempt ${i}, waiting for 2 minutes......"
            sleep 120
            i=$((i + 1))
          done

          if [ "$i" -gt 30 ]; then
            log_error "Artifact ${ARTIFACT_NAME}.zip not found after 30 attempts"
            exit 1
          fi

          log_pass "Artifact ${ARTIFACT_NAME}.zip is available and ready"

          echo "build-tag=${{ inputs.build-tag }}" >> "${GITHUB_OUTPUT}"
          echo "build-version=${ARTIFACT_NAME}" >> "${GITHUB_OUTPUT}"

          # Update Summary
          {
            echo "## Artifact Verification Results"
            echo "- **Artifact Path**: \`${ARTIFACT_PATH}\`"
            echo "- **Verification Time**: $(date '+%Y-%m-%d %T UTC')"
            echo "- **Attempts Required**: ${i}/30"
          } >> "${GITHUB_STEP_SUMMARY}"

      - name: Start Canonical Test
        id: start-canonical-test
        env:
          USERNAME: ${{ secrets.TESTING_JENKINS_API_USERNAME }}
          PASSWORD: ${{ secrets.TESTING_JENKINS_API_PASSWORD }}
          SERVER: ${{ secrets.TESTING_JENKINS_API_SERVER }}
          TEST_SCRIPT: ".github/workflows/support/scripts/sdct.sh"
        run: |-
          # log functions
          log_info() { echo "[$(date '+%Y-%m-%d %T')] ℹ️  $1"; }
          log_pass() { echo "[$(date '+%Y-%m-%d %T')] ✅ $1"; }
          log_error() { echo "[$(date '+%Y-%m-%d %T')] ❌ $1" >&2; }
          log_warning() { echo "[$(date '+%Y-%m-%d %T')] ⚠️  $1"; }

          set -euo pipefail

          TEST_SCRIPT_PATH="${{ github.workspace }}/${{ env.TEST_SCRIPT }}"
          if [ ! -f "${TEST_SCRIPT_PATH}" ]; then
            log_error "Test script not found: ${TEST_SCRIPT_PATH}"
            exit 1
          fi

          for var in USERNAME PASSWORD SERVER; do
            if [[ -z "${!var:-}" ]]; then
              log_error "Required environment variable ${var} is not set"
              exit 1
            fi
          done

          BUILD_TAG="${{ steps.check-if-exist.outputs.build-tag }}"
          BUILD_VERSION="${{ steps.check-if-exist.outputs.build-version }}"

          log_info "Starting canonical test execution......"
          log_info "Build Tag: ${BUILD_TAG}"
          log_info "Build Version: ${BUILD_VERSION}"


          if bash "${TEST_SCRIPT_PATH}" "${BUILD_TAG}" "${BUILD_VERSION}"; then
            log_pass "Canonical test started successfully"
            echo "status=success" >> "${GITHUB_OUTPUT}"
          else
            log_error "Canonical test failed to start"
            echo "status=failure" >> "${GITHUB_OUTPUT}"
            exit 1
          fi

      - name: Summary
        id: summary
        if: always()
        run: |-
          # log functions
          log_info() { echo "[$(date '+%Y-%m-%d %T')] ℹ️  $1"; }

          # overall status
          OVERALL_STATUS="✅ Success"
          if [[ "${{ steps.start-canonical-test.outcome }}" != "success" ]]; then
            OVERALL_STATUS="❌ Failed"
          elif [[ "${{ steps.check-if-exist.outcome }}" != "success" ]]; then
            OVERALL_STATUS="❌ Failed (Artifact Check)"
          elif [[ "${{ steps.parameters.outcome }}" != "success" ]]; then
            OVERALL_STATUS="❌ Failed (Parameter Processing)"
          fi

          # Summary
          {
            echo "# ZXF Canonical Test Workflow Summary"
            echo
            echo "## Overall Status: ${OVERALL_STATUS}"
            echo
            echo "## Input Parameters"
            echo "- **Reference**: \`${{ inputs.ref }}\`"
            echo "- **Build Tag**: \`${{ inputs.build-tag }}\`"
            echo
            echo "## Processing Results"
            echo "- **Generated Artifact Name**: \`${{ steps.check-if-exist.outputs.build-version || 'N/A' }}\`"
            echo "- **Artifact Check**: ${{ steps.check-if-exist.outcome == 'success' && '✅ Passed' || '❌ Failed' }}"
            echo "- **Test Trigger**: ${{ steps.start-canonical-test.outcome == 'success' && '✅ Passed' || '❌ Failed' }}"
            echo
            echo "## Execution Details"
            echo "- **Workflow Run ID**: ${{ github.run_id }}"
            echo "- **Workflow Run Number**: ${{ github.run_number }}"
            echo "- **Runner**: \`${{ runner.name }}\`"
            echo "- **OS**: \`${{ runner.os }}\`"
            echo "- **Triggered By**: ${{ github.actor }}"
            echo "- **Execution Time**: $(date '+%Y-%m-%d %T UTC')"
            echo
            if [[ "${OVERALL_STATUS}" == *"Failed"* ]]; then
              echo "## ⚠️ Troubleshooting"
              echo "1. Check the artifact exists in the specified bucket"
              echo "2. Review the test script for any issues"
            fi
          } >> "${GITHUB_STEP_SUMMARY}"

  report-failures:
    name: Report Failures to Rootly
    needs: canonical-test
    if: ${{ needs.canonical-test.result != 'success' }}
    runs-on: hiero-citr-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Set Rootly Service
        id: set-rootly-service
        run: |
          ROOTLY_SERVICE="CITR SDCT"
          if [[ "${{ needs.canonical-test.outputs.harden-runner }}" =~ ^(cancelled|failure)$ ]] \
            || [[ "${{ needs.canonical-test.outputs.checkout-code }}" =~ ^(cancelled|failure)$ ]] \
            || [[ "${{ needs.canonical-test.outputs.gcloud-auth }}" =~ ^(cancelled|failure)$ ]] \
            || [[ "${{ needs.canonical-test.outputs.setup-gcloud }}" =~ ^(cancelled|failure)$ ]] \
            || [[ "${{ needs.canonical-test.outputs.install-tools }}" =~ ^(cancelled|failure)$ ]] \
            || [[ "${{ needs.canonical-test.outputs.summary }}" =~ ^(cancelled|failure)$ ]]; then
            ROOTLY_SERVICE="CI/CD Workflows"
          fi
          echo "service=${ROOTLY_SERVICE}" >> "${GITHUB_OUTPUT}"

      - name: Set Incident Creation Flag
        id: set-create-incident
        run: |
          CREATE_INCIDENT="false"
          if [[ "${{ needs.canonical-test.outputs.start-canonical-test }}" == "failure" ]] \
            || [[ "${{ needs.canonical-test.outputs.check-if-exist }}" == "failure" ]] \
            || [[ "${{ needs.canonical-test.outputs.parameters }}" == "failure" ]]; then
            CREATE_INCIDENT="true"
          fi
          echo "create=${CREATE_INCIDENT}" >> "${GITHUB_OUTPUT}"

      - name: Build Rootly Summary
        id: rootly-summary
        run: |
          title="The SDCT Job Failed"
          echo "title=${title}" >> "${GITHUB_OUTPUT}"
          {
            echo 'summary<<EOF'
            echo "------------------------------------"
            echo "- Harden Runner: ${{ needs.canonical-test.outputs.harden-runner }}"
            echo "- Checkout Code: ${{ needs.canonical-test.outputs.checkout-code }}"
            echo "- GCloud Auth: ${{ needs.canonical-test.outputs.gcloud-auth }}"
            echo "- Setup GCloud: ${{ needs.canonical-test.outputs.setup-gcloud }}"
            echo "- Install Tools: ${{ needs.canonical-test.outputs.install-tools }}"
            echo "- Parameters: ${{ needs.canonical-test.outputs.parameters }}"
            echo "- Check Artifact: ${{ needs.canonical-test.outputs.check-if-exist }}"
            echo "- Start Canonical Test: ${{ needs.canonical-test.outputs.start-canonical-test }}"
            echo "- Summary: ${{ needs.canonical-test.outputs.summary }}"
            echo "------------------------------------"
            echo "Commit Information:"
            echo "- Commit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ needs.canonical-test.outputs.commit }}
            echo "- Tag: ${{ inputs.build-tag }}"
            echo "- Workflow: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>"
            echo EOF
          } >> "${GITHUB_OUTPUT}"

      - name: Log Rootly Summary
        run: |
          echo "## Rootly Summary:"
          echo "### Title: ${{ steps.rootly-summary.outputs.title }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "${{ steps.rootly-summary.outputs.summary }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Service" >> "${GITHUB_STEP_SUMMARY}"
          echo "${{ steps.set-service.outputs.service }}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Create Rootly Alert
        id: create-rootly-alert
        uses: pandaswhocode/rootly-alert-action@fdae1529e5aed62040016accf719a0ceb7dae57f # v1.0.0
        continue-on-error: true # continue on error so we can get the incident reporting
        with:
          api_key: ${{ secrets.ROOTLY_API_TOKEN }}
          summary: ${{ steps.rootly-summary.outputs.title }}
          details: ${{ steps.rootly-summary.outputs.summary }}
          notification_target_type: "Service"
          notification_target: ${{ steps.set-service.outputs.service }}
          set_as_noise: "true"
          alert_urgency: "High"
          environments: "CITR"
          external_id: ${{ github.run_id }}
          external_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Create Rootly Incident
        if: ${{ steps.set-create-incident.outputs.create == 'true' }}
        uses: pandaswhocode/rootly-incident-action@4327542435bb4c8c48f15fba47efb87a28f8533f # v2.0.1
        with:
          api_key: ${{ secrets.ROOTLY_API_TOKEN }}
          title: "${{ steps.rootly-summary.outputs.title }}"
          kind: "normal"
          create_public_incident: "false"
          summary: "${{ steps.rootly-summary.outputs.summary }}"
          severity: "Triage Event"
          alert_ids: ${{ steps.create-rootly-alert.outputs.alert_id || '' }}
          environments: "CITR"
          incident_types: "Platform CI,Performance Engineering"
          services: ${{ steps.set-rootly-service.outputs.service }}
          teams: "Platform CI,Performance Engineering"
